/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
    springVersion = '5.3.22'
    slf4jVersion = '2.0.3'
}

dependencies {

    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-context:${springVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.24'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    mainClass = 'com.romanko.rdr2.screens.converter.app.RDR2ScreensConverter'
}


jar {
    duplicatesStrategy = 'exclude'
    enabled = true
    manifest {
        attributes 'Main-Class': 'com.romanko.rdr2.screens.converter.app.RDR2ScreensConverter'
    }
    archivesBaseName = 'rdr2-screens-converter'
    dependsOn configurations.runtimeClasspath

    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    // Add specific Spring packages or classes that are not included automatically
    from {
        configurations.runtimeClasspath.findAll { it.name.startsWith('spring-') }.collect { zipTree(it) }
    }
}


tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
